{"ast":null,"code":"import * as utils from './common/utils.js';\nimport { getSlideOrSection } from './common/utilsFP.js';\nimport { getContainer } from './common/options.js';\n\n// let g_mediaLoadedId;\n\n/**\n* Callback firing when a lazy load media element has loaded.\n* Making sure it only fires one per section in normal conditions (if load time is not huge)\n*/\nexport function onMediaLoad(section) {\n  // if(getOptions().scrollOverflow){\n  //     clearTimeout(g_mediaLoadedId);\n  //     g_mediaLoadedId = setTimeout(function(){\n  //         if(!utils.hasClass($body, RESPONSIVE)){\n  //             scrollBarHandler.createScrollBar(section);\n  //         }\n  //     }, 200);\n  // }\n}\n\n/**\n* Plays video and audio elements.\n*/\nexport function playMedia(destiny) {\n  var panel = getSlideOrSection(destiny);\n\n  //playing HTML5 media elements\n  utils.$('video, audio', panel).forEach(function (element) {\n    if (element.hasAttribute('data-autoplay') && typeof element.play === 'function') {\n      element.play();\n    }\n  });\n\n  //youtube videos\n  utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function (element) {\n    if (element.hasAttribute('data-autoplay')) {\n      playYoutube(element);\n    }\n\n    //in case the URL was not loaded yet. On page load we need time for the new URL (with the API string) to load.\n    element.onload = function () {\n      if (element.hasAttribute('data-autoplay')) {\n        playYoutube(element);\n      }\n    };\n  });\n}\n\n/**\n* Plays a youtube video\n*/\nfunction playYoutube(element) {\n  element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}', '*');\n}\n\n/**\n* Stops video and audio elements.\n*/\nexport function stopMedia(destiny) {\n  var panel = getSlideOrSection(destiny);\n\n  //stopping HTML5 media elements\n  utils.$('video, audio', panel).forEach(function (element) {\n    if (!element.hasAttribute('data-keepplaying') && typeof element.pause === 'function') {\n      element.pause();\n    }\n  });\n\n  //youtube videos\n  utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function (element) {\n    if (/youtube\\.com\\/embed\\//.test(utils.getAttr(element, 'src')) && !element.hasAttribute('data-keepplaying')) {\n      element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', '*');\n    }\n  });\n}\n\n/*\n* Enables the Youtube videos API so we can control their flow if necessary.\n*/\nexport function enableYoutubeAPI() {\n  utils.$('iframe[src*=\"youtube.com/embed/\"]', getContainer()).forEach(function (item) {\n    addURLParam(item, 'enablejsapi=1');\n  });\n}\n\n/**\n* Adds a new parameter and its value to the `src` of a given element\n*/\nfunction addURLParam(element, newParam) {\n  var originalSrc = utils.getAttr(element, 'src');\n  element.setAttribute('src', originalSrc + getUrlParamSign(originalSrc) + newParam);\n}\n\n/*\n* Returns the prefix sign to use for a new parameter in an existen URL.\n*\n* @return {String}  ? | &\n*/\nfunction getUrlParamSign(url) {\n  return !/\\?/.test(url) ? '?' : '&';\n}","map":{"version":3,"names":["utils","getSlideOrSection","getContainer","onMediaLoad","section","playMedia","destiny","panel","$","forEach","element","hasAttribute","play","playYoutube","onload","contentWindow","postMessage","stopMedia","pause","test","getAttr","enableYoutubeAPI","item","addURLParam","newParam","originalSrc","setAttribute","getUrlParamSign","url"],"sources":["/Users/rachelma/college/2023/fall/2223/internet-art/src/js/media.js"],"sourcesContent":["import * as utils from './common/utils.js'; \nimport { getSlideOrSection } from './common/utilsFP.js';\nimport { getContainer } from './common/options.js';\n\n// let g_mediaLoadedId;\n\n/**\n* Callback firing when a lazy load media element has loaded.\n* Making sure it only fires one per section in normal conditions (if load time is not huge)\n*/\nexport function onMediaLoad(section){\n// if(getOptions().scrollOverflow){\n//     clearTimeout(g_mediaLoadedId);\n//     g_mediaLoadedId = setTimeout(function(){\n//         if(!utils.hasClass($body, RESPONSIVE)){\n//             scrollBarHandler.createScrollBar(section);\n//         }\n//     }, 200);\n// }\n}\n\n\n/**\n* Plays video and audio elements.\n*/\nexport function playMedia(destiny){\n    var panel = getSlideOrSection(destiny);\n\n    //playing HTML5 media elements\n    utils.$('video, audio', panel).forEach(function(element){\n        if( element.hasAttribute('data-autoplay') && typeof element.play === 'function' ) {\n            element.play();\n        }\n    });\n\n    //youtube videos\n    utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function(element){\n        if ( element.hasAttribute('data-autoplay') ){\n            playYoutube(element);\n        }\n\n        //in case the URL was not loaded yet. On page load we need time for the new URL (with the API string) to load.\n        element.onload = function() {\n            if ( element.hasAttribute('data-autoplay') ){\n                playYoutube(element);\n            }\n        };\n    });\n}\n\n/**\n* Plays a youtube video\n*/\nfunction playYoutube(element){\n    element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}', '*');\n}\n\n/**\n* Stops video and audio elements.\n*/\nexport function stopMedia(destiny){\n    var panel = getSlideOrSection(destiny);\n\n    //stopping HTML5 media elements\n    utils.$('video, audio', panel).forEach(function(element){\n        if( !element.hasAttribute('data-keepplaying') && typeof element.pause === 'function' ) {\n            element.pause();\n        }\n    });\n\n    //youtube videos\n    utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function(element){\n        if( /youtube\\.com\\/embed\\//.test(utils.getAttr(element, 'src')) && !element.hasAttribute('data-keepplaying')){\n            element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}','*');\n        }\n    });\n}\n\n/*\n* Enables the Youtube videos API so we can control their flow if necessary.\n*/\nexport function enableYoutubeAPI(){\n    utils.$('iframe[src*=\"youtube.com/embed/\"]', getContainer()).forEach(function(item){\n        addURLParam(item, 'enablejsapi=1');\n    });\n}\n\n/**\n* Adds a new parameter and its value to the `src` of a given element\n*/\nfunction addURLParam(element, newParam){\n    var originalSrc = utils.getAttr(element, 'src');\n    element.setAttribute('src', originalSrc + getUrlParamSign(originalSrc) + newParam);\n}\n\n\n/*\n* Returns the prefix sign to use for a new parameter in an existen URL.\n*\n* @return {String}  ? | &\n*/\nfunction getUrlParamSign(url){\n    return ( !/\\?/.test( url ) ) ? '?' : '&';\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}