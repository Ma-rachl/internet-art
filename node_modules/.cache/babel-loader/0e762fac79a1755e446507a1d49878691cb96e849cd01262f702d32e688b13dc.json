{"ast":null,"code":"import { win } from '../common/constants.js';\nimport * as utils from '../common/utils.js';\nexport const wheelDataHandler = function () {\n  var _prevTime = new Date().getTime();\n  var _scrollings = [];\n  var isScrollingVertically;\n  var direction;\n  return {\n    registerEvent: function (e) {\n      e = e || win.event;\n      var value = e.wheelDelta || -e.deltaY || -e.detail;\n      var delta = Math.max(-1, Math.min(1, value));\n      var horizontalDetection = typeof e.wheelDeltaX !== 'undefined' || typeof e.deltaX !== 'undefined';\n      isScrollingVertically = Math.abs(e.wheelDeltaX) < Math.abs(e.wheelDelta) || Math.abs(e.deltaX) < Math.abs(e.deltaY) || !horizontalDetection;\n      var curTime = new Date().getTime();\n      direction = delta < 0 ? 'down' : 'up';\n\n      //Limiting the array to 150 (lets not waste memory!)\n      if (_scrollings.length > 149) {\n        _scrollings.shift();\n      }\n\n      //keeping record of the previous scrollings\n      _scrollings.push(Math.abs(value));\n\n      //time difference between the last scroll and the current one\n      var timeDiff = curTime - _prevTime;\n      _prevTime = curTime;\n\n      //haven't they scrolled in a while?\n      //(enough to be consider a different scrolling action to scroll another section)\n      if (timeDiff > 200) {\n        //emptying the array, we dont care about old scrollings for our averages\n        _scrollings = [];\n      }\n    },\n    isAccelerating: function () {\n      var averageEnd = utils.getAverage(_scrollings, 10);\n      var averageMiddle = utils.getAverage(_scrollings, 70);\n      var isAccelerating = averageEnd >= averageMiddle;\n      return _scrollings.length ? isAccelerating && isScrollingVertically : false;\n    },\n    getDirection: function () {\n      return direction;\n    }\n  };\n}();","map":{"version":3,"names":["win","utils","wheelDataHandler","_prevTime","Date","getTime","_scrollings","isScrollingVertically","direction","registerEvent","e","event","value","wheelDelta","deltaY","detail","delta","Math","max","min","horizontalDetection","wheelDeltaX","deltaX","abs","curTime","length","shift","push","timeDiff","isAccelerating","averageEnd","getAverage","averageMiddle","getDirection"],"sources":["/Users/rachelma/college/2023/fall/2223/internet-art/src/js/beyondFullpage/wheelDataHandler.js"],"sourcesContent":["\nimport { win } from '../common/constants.js';\nimport * as utils from '../common/utils.js';\n\nexport const wheelDataHandler = (function(){\n    var _prevTime = new Date().getTime();\n    var _scrollings = [];\n    var isScrollingVertically;\n    var direction;\n\n    return {\n        registerEvent: function(e){\n            e = e || win.event;\n            var value = e.wheelDelta || -e.deltaY || -e.detail;\n            var delta = Math.max(-1, Math.min(1, value));\n            var horizontalDetection = typeof e.wheelDeltaX !== 'undefined' || typeof e.deltaX !== 'undefined';\n            isScrollingVertically = (Math.abs(e.wheelDeltaX) < Math.abs(e.wheelDelta)) || (Math.abs(e.deltaX ) < Math.abs(e.deltaY) || !horizontalDetection);\n            var curTime = new Date().getTime();\n            direction = delta < 0 ? 'down': 'up';\n\n            //Limiting the array to 150 (lets not waste memory!)\n            if(_scrollings.length > 149){\n                _scrollings.shift();\n            }\n\n            //keeping record of the previous scrollings\n            _scrollings.push(Math.abs(value));\n\n            //time difference between the last scroll and the current one\n            var timeDiff = curTime - _prevTime;\n            _prevTime = curTime;\n\n            //haven't they scrolled in a while?\n            //(enough to be consider a different scrolling action to scroll another section)\n            if(timeDiff > 200){\n                //emptying the array, we dont care about old scrollings for our averages\n                _scrollings = [];\n            }  \n        },\n        isAccelerating: function(){\n            var averageEnd = utils.getAverage(_scrollings, 10);\n            var averageMiddle = utils.getAverage(_scrollings, 70);\n            var isAccelerating = averageEnd >= averageMiddle;\n\n            return _scrollings.length ? isAccelerating && isScrollingVertically : false;\n        },\n\n        getDirection: function(){\n            return direction;\n        }\n    };\n})();\n"],"mappings":"AACA,SAASA,GAAG,QAAQ,wBAAwB;AAC5C,OAAO,KAAKC,KAAK,MAAM,oBAAoB;AAE3C,OAAO,MAAMC,gBAAgB,GAAI,YAAU;EACvC,IAAIC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EACpC,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,qBAAqB;EACzB,IAAIC,SAAS;EAEb,OAAO;IACHC,aAAa,EAAE,SAAAA,CAASC,CAAC,EAAC;MACtBA,CAAC,GAAGA,CAAC,IAAIV,GAAG,CAACW,KAAK;MAClB,IAAIC,KAAK,GAAGF,CAAC,CAACG,UAAU,IAAI,CAACH,CAAC,CAACI,MAAM,IAAI,CAACJ,CAAC,CAACK,MAAM;MAClD,IAAIC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEP,KAAK,CAAC,CAAC;MAC5C,IAAIQ,mBAAmB,GAAG,OAAOV,CAAC,CAACW,WAAW,KAAK,WAAW,IAAI,OAAOX,CAAC,CAACY,MAAM,KAAK,WAAW;MACjGf,qBAAqB,GAAIU,IAAI,CAACM,GAAG,CAACb,CAAC,CAACW,WAAW,CAAC,GAAGJ,IAAI,CAACM,GAAG,CAACb,CAAC,CAACG,UAAU,CAAC,IAAMI,IAAI,CAACM,GAAG,CAACb,CAAC,CAACY,MAAO,CAAC,GAAGL,IAAI,CAACM,GAAG,CAACb,CAAC,CAACI,MAAM,CAAC,IAAI,CAACM,mBAAoB;MAChJ,IAAII,OAAO,GAAG,IAAIpB,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MAClCG,SAAS,GAAGQ,KAAK,GAAG,CAAC,GAAG,MAAM,GAAE,IAAI;;MAEpC;MACA,IAAGV,WAAW,CAACmB,MAAM,GAAG,GAAG,EAAC;QACxBnB,WAAW,CAACoB,KAAK,CAAC,CAAC;MACvB;;MAEA;MACApB,WAAW,CAACqB,IAAI,CAACV,IAAI,CAACM,GAAG,CAACX,KAAK,CAAC,CAAC;;MAEjC;MACA,IAAIgB,QAAQ,GAAGJ,OAAO,GAAGrB,SAAS;MAClCA,SAAS,GAAGqB,OAAO;;MAEnB;MACA;MACA,IAAGI,QAAQ,GAAG,GAAG,EAAC;QACd;QACAtB,WAAW,GAAG,EAAE;MACpB;IACJ,CAAC;IACDuB,cAAc,EAAE,SAAAA,CAAA,EAAU;MACtB,IAAIC,UAAU,GAAG7B,KAAK,CAAC8B,UAAU,CAACzB,WAAW,EAAE,EAAE,CAAC;MAClD,IAAI0B,aAAa,GAAG/B,KAAK,CAAC8B,UAAU,CAACzB,WAAW,EAAE,EAAE,CAAC;MACrD,IAAIuB,cAAc,GAAGC,UAAU,IAAIE,aAAa;MAEhD,OAAO1B,WAAW,CAACmB,MAAM,GAAGI,cAAc,IAAItB,qBAAqB,GAAG,KAAK;IAC/E,CAAC;IAED0B,YAAY,EAAE,SAAAA,CAAA,EAAU;MACpB,OAAOzB,SAAS;IACpB;EACJ,CAAC;AACL,CAAC,CAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}