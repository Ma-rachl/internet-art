{"ast":null,"code":"import * as utils from './utils.js';\nimport { defaultOptions } from '../optionsDefault.js';\nlet container = null;\nlet g_initialAnchorsInDom = false;\nlet originals = utils.deepExtend({}, defaultOptions); //deep copy\nvar g_options = null;\nexport function getInitialAnchorsInDom() {\n  return g_initialAnchorsInDom;\n}\nexport function setContainer(value) {\n  container = value;\n}\nexport function getContainer(value) {\n  return container;\n}\nexport function getOptions() {\n  return g_options || defaultOptions;\n}\nexport function setOptions(options) {\n  g_options = utils.deepExtend({}, defaultOptions, options);\n  originals = Object.assign({}, g_options);\n}\nexport function getOriginals() {\n  return originals;\n}\nexport function setOption(name, value) {\n  defaultOptions[name] = value;\n}\n\n/*\n* Sets the state for a variable with multiple states (original, and temporal)\n* Some variables such as `autoScrolling` or `recordHistory` might change automatically its state when using `responsive` or `autoScrolling:false`.\n* This function is used to keep track of both states, the original and the temporal one.\n* If type is not 'internal', then we assume the user is globally changing the variable.\n*/\nexport function setVariableState(variable, value, type) {\n  g_options[variable] = value;\n  if (type !== 'internal') {\n    originals[variable] = value;\n  }\n}\n\n/**\n* Setting options from DOM elements if they are not provided.\n*/\nexport function setOptionsFromDOM() {\n  //no anchors option? Checking for them in the DOM attributes\n  if (!getOptions().anchors.length) {\n    var anchorsAttribute = '[data-anchor]';\n    var anchors = utils.$(getOptions().sectionSelector.split(',').join(anchorsAttribute + ',') + anchorsAttribute, container);\n    if (anchors.length && anchors.length === utils.$(getOptions().sectionSelector, container).length) {\n      g_initialAnchorsInDom = true;\n      anchors.forEach(function (item) {\n        getOptions().anchors.push(utils.getAttr(item, 'data-anchor').toString());\n      });\n    }\n  }\n\n  //no tooltips option? Checking for them in the DOM attributes\n  if (!getOptions().navigationTooltips.length) {\n    var tooltipsAttribute = '[data-tooltip]';\n    var tooltips = utils.$(getOptions().sectionSelector.split(',').join(tooltipsAttribute + ',') + tooltipsAttribute, container);\n    if (tooltips.length) {\n      tooltips.forEach(function (item) {\n        getOptions().navigationTooltips.push(utils.getAttr(item, 'data-tooltip').toString());\n      });\n    }\n  }\n}","map":{"version":3,"names":["utils","defaultOptions","container","g_initialAnchorsInDom","originals","deepExtend","g_options","getInitialAnchorsInDom","setContainer","value","getContainer","getOptions","setOptions","options","Object","assign","getOriginals","setOption","name","setVariableState","variable","type","setOptionsFromDOM","anchors","length","anchorsAttribute","$","sectionSelector","split","join","forEach","item","push","getAttr","toString","navigationTooltips","tooltipsAttribute","tooltips"],"sources":["/Users/rachelma/college/2023/fall/2223/internet-art/src/js/common/options.js"],"sourcesContent":["import * as utils from './utils.js';\nimport { defaultOptions } from '../optionsDefault.js';\n\nlet container = null;\nlet g_initialAnchorsInDom = false;\nlet originals = utils.deepExtend({}, defaultOptions); //deep copy\nvar g_options = null;\n\nexport function getInitialAnchorsInDom(){\n    return g_initialAnchorsInDom;\n}\n\nexport function setContainer(value){\n    container = value;\n}\n\nexport function getContainer(value){\n    return container;\n}\n\nexport function getOptions(){\n    return g_options || defaultOptions;\n}\n\nexport function setOptions(options){\n    g_options = utils.deepExtend({}, defaultOptions, options);\n    originals = Object.assign({}, g_options);\n}\n\nexport function getOriginals(){\n    return originals;\n}\n\nexport function setOption(name, value){\n    defaultOptions[name] = value;\n}\n\n/*\n* Sets the state for a variable with multiple states (original, and temporal)\n* Some variables such as `autoScrolling` or `recordHistory` might change automatically its state when using `responsive` or `autoScrolling:false`.\n* This function is used to keep track of both states, the original and the temporal one.\n* If type is not 'internal', then we assume the user is globally changing the variable.\n*/\nexport function setVariableState(variable, value, type){\n    g_options[variable] = value;\n    if(type !== 'internal'){\n        originals[variable] = value;\n    }\n}\n\n/**\n* Setting options from DOM elements if they are not provided.\n*/\nexport function setOptionsFromDOM(){\n\n    //no anchors option? Checking for them in the DOM attributes\n    if(!getOptions().anchors.length){\n        var anchorsAttribute = '[data-anchor]';\n        var anchors = utils.$(getOptions().sectionSelector.split(',').join(anchorsAttribute + ',') + anchorsAttribute, container);\n        if(anchors.length && anchors.length === utils.$(getOptions().sectionSelector, container).length){\n            g_initialAnchorsInDom = true;\n            anchors.forEach(function(item){\n                getOptions().anchors.push(utils.getAttr(item, 'data-anchor').toString());\n            });\n        }\n    }\n\n    //no tooltips option? Checking for them in the DOM attributes\n    if(!getOptions().navigationTooltips.length){\n        var tooltipsAttribute = '[data-tooltip]';\n        var tooltips = utils.$(getOptions().sectionSelector.split(',').join(tooltipsAttribute + ',') + tooltipsAttribute, container);\n        if(tooltips.length){\n            tooltips.forEach(function(item){\n                getOptions().navigationTooltips.push(utils.getAttr(item, 'data-tooltip').toString());\n            });\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}