{"ast":null,"code":"//@ts-check\nimport * as utils from '../common/utils.js';\nimport { silentScroll } from '../common/silentScroll.js';\nimport { getState, setState } from '../common/state.js';\nimport { silentLandscapeScroll } from '../slides/silentLandscapeScroll.js';\nimport { SECTION_SEL, SLIDE_ACTIVE_SEL } from '../common/selectors.js';\nimport { getYmovement } from '../common/utilsFP.js';\n\n/**\n* Adds sections before or after the current one to create the infinite effect.\n*/\nexport function createInfiniteSections(v) {\n  setState({\n    isDoingContinousVertical: true\n  });\n  var activeSectionItem = getState().activeSection.item;\n\n  // Scrolling down\n  if (!v.isMovementUp) {\n    // Move all previous sections to after the active section\n    utils.after(activeSectionItem, utils.prevAll(activeSectionItem, SECTION_SEL).reverse());\n  } else {\n    // Scrolling up\n    // Move all next sections to before the active section\n    utils.before(activeSectionItem, utils.nextAll(activeSectionItem, SECTION_SEL));\n  }\n\n  // Maintain the displayed position (now that we changed the element order)\n  silentScroll(getState().activeSection.item.offsetTop);\n\n  // Maintain the active slides visible in the viewport\n  keepSlidesPosition();\n\n  // save for later the elements that still need to be reordered\n  v.wrapAroundElements = activeSectionItem;\n\n  // Recalculate animation variables\n  v.dtop = v.element.offsetTop;\n  v.yMovement = getYmovement(getState().activeSection, v.element);\n  return v;\n}\n\n/**\n* Maintains the active slides in the viewport\n* (Because the `scroll` animation might get lost with some actions, such as when using continuousVertical)\n*/\nfunction keepSlidesPosition() {\n  var activeSlides = utils.$(SLIDE_ACTIVE_SEL);\n  for (var i = 0; i < activeSlides.length; i++) {\n    silentLandscapeScroll(activeSlides[i], 'internal');\n  }\n}","map":{"version":3,"names":["utils","silentScroll","getState","setState","silentLandscapeScroll","SECTION_SEL","SLIDE_ACTIVE_SEL","getYmovement","createInfiniteSections","v","isDoingContinousVertical","activeSectionItem","activeSection","item","isMovementUp","after","prevAll","reverse","before","nextAll","offsetTop","keepSlidesPosition","wrapAroundElements","dtop","element","yMovement","activeSlides","$","i","length"],"sources":["/Users/rachelma/college/2023/fall/2223/internet-art/src/js/infiniteScroll/createInfiniteSections.js"],"sourcesContent":["//@ts-check\nimport * as utils from '../common/utils.js';\nimport { silentScroll } from '../common/silentScroll.js';\nimport { getState, setState } from '../common/state.js';\nimport { silentLandscapeScroll } from '../slides/silentLandscapeScroll.js';\nimport {\n    SECTION_SEL,\n    SLIDE_ACTIVE_SEL\n} from '../common/selectors.js';\nimport { getYmovement } from '../common/utilsFP.js';\n\n\n/**\n* Adds sections before or after the current one to create the infinite effect.\n*/\nexport function createInfiniteSections(v){\n    setState({isDoingContinousVertical: true});\n    var activeSectionItem = getState().activeSection.item;\n    \n    // Scrolling down\n    if (!v.isMovementUp) {\n        // Move all previous sections to after the active section\n        utils.after(activeSectionItem, utils.prevAll(activeSectionItem, SECTION_SEL).reverse());\n    }\n    else { // Scrolling up\n        // Move all next sections to before the active section\n        utils.before(activeSectionItem, utils.nextAll(activeSectionItem, SECTION_SEL));\n    }\n\n    // Maintain the displayed position (now that we changed the element order)\n    silentScroll(getState().activeSection.item.offsetTop);\n\n    // Maintain the active slides visible in the viewport\n    keepSlidesPosition();\n\n    // save for later the elements that still need to be reordered\n    v.wrapAroundElements = activeSectionItem;\n\n    // Recalculate animation variables\n    v.dtop = v.element.offsetTop;\n    v.yMovement = getYmovement(getState().activeSection, v.element);\n\n    return v;\n}\n\n/**\n* Maintains the active slides in the viewport\n* (Because the `scroll` animation might get lost with some actions, such as when using continuousVertical)\n*/\nfunction keepSlidesPosition(){\n    var activeSlides = utils.$(SLIDE_ACTIVE_SEL);\n    for( var i =0; i<activeSlides.length; i++){\n        silentLandscapeScroll(activeSlides[i], 'internal');\n    }\n}\n\n\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,oBAAoB;AAC3C,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,oBAAoB;AACvD,SAASC,qBAAqB,QAAQ,oCAAoC;AAC1E,SACIC,WAAW,EACXC,gBAAgB,QACb,wBAAwB;AAC/B,SAASC,YAAY,QAAQ,sBAAsB;;AAGnD;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,CAAC,EAAC;EACrCN,QAAQ,CAAC;IAACO,wBAAwB,EAAE;EAAI,CAAC,CAAC;EAC1C,IAAIC,iBAAiB,GAAGT,QAAQ,CAAC,CAAC,CAACU,aAAa,CAACC,IAAI;;EAErD;EACA,IAAI,CAACJ,CAAC,CAACK,YAAY,EAAE;IACjB;IACAd,KAAK,CAACe,KAAK,CAACJ,iBAAiB,EAAEX,KAAK,CAACgB,OAAO,CAACL,iBAAiB,EAAEN,WAAW,CAAC,CAACY,OAAO,CAAC,CAAC,CAAC;EAC3F,CAAC,MACI;IAAE;IACH;IACAjB,KAAK,CAACkB,MAAM,CAACP,iBAAiB,EAAEX,KAAK,CAACmB,OAAO,CAACR,iBAAiB,EAAEN,WAAW,CAAC,CAAC;EAClF;;EAEA;EACAJ,YAAY,CAACC,QAAQ,CAAC,CAAC,CAACU,aAAa,CAACC,IAAI,CAACO,SAAS,CAAC;;EAErD;EACAC,kBAAkB,CAAC,CAAC;;EAEpB;EACAZ,CAAC,CAACa,kBAAkB,GAAGX,iBAAiB;;EAExC;EACAF,CAAC,CAACc,IAAI,GAAGd,CAAC,CAACe,OAAO,CAACJ,SAAS;EAC5BX,CAAC,CAACgB,SAAS,GAAGlB,YAAY,CAACL,QAAQ,CAAC,CAAC,CAACU,aAAa,EAAEH,CAAC,CAACe,OAAO,CAAC;EAE/D,OAAOf,CAAC;AACZ;;AAEA;AACA;AACA;AACA;AACA,SAASY,kBAAkBA,CAAA,EAAE;EACzB,IAAIK,YAAY,GAAG1B,KAAK,CAAC2B,CAAC,CAACrB,gBAAgB,CAAC;EAC5C,KAAK,IAAIsB,CAAC,GAAE,CAAC,EAAEA,CAAC,GAACF,YAAY,CAACG,MAAM,EAAED,CAAC,EAAE,EAAC;IACtCxB,qBAAqB,CAACsB,YAAY,CAACE,CAAC,CAAC,EAAE,UAAU,CAAC;EACtD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}