{"ast":null,"code":"import * as utils from '../common/utils.js';\nimport { getOptions } from '../common/options.js';\nimport { AUTO_HEIGHT_SEL, AUTO_HEIGHT_RESPONSIVE_SEL, SECTION_SEL, ACTIVE_SEL } from '../common/selectors.js';\nimport { state } from '../common/state.js';\nimport { isResponsiveMode } from '../responsive.js';\nimport { lazyLoad } from './lazyLoad.js';\n\n/**\n* Makes sure lazyload is done for other sections in the viewport that are not the\n* active one. \n*/\nexport function lazyLoadOthers() {\n  var hasAutoHeightSections = utils.$(AUTO_HEIGHT_SEL)[0] || isResponsiveMode() && utils.$(AUTO_HEIGHT_RESPONSIVE_SEL)[0];\n\n  //quitting when it doesn't apply\n  if (!getOptions().lazyLoading || !hasAutoHeightSections) {\n    return;\n  }\n\n  //making sure to lazy load auto-height sections that are in the viewport\n  utils.$(SECTION_SEL + ':not(' + ACTIVE_SEL + ')').forEach(function (section) {\n    if (isSectionInViewport(section)) {\n      lazyLoad(section);\n    }\n  });\n}\n\n/**\n* Determines whether a section is in the viewport or not.\n*/\nfunction isSectionInViewport(el) {\n  var rect = el.getBoundingClientRect();\n  var top = rect.top;\n  var bottom = rect.bottom;\n\n  //sometimes there's a 1px offset on the bottom of the screen even when the \n  //section's height is the window.innerHeight one. I guess because pixels won't allow decimals.\n  //using this prevents from lazyLoading the section that is not yet visible \n  //(only 1 pixel offset is)\n  var pixelOffset = 2;\n  var isTopInView = top + pixelOffset < state.windowsHeight && top > 0;\n  var isBottomInView = bottom > pixelOffset && bottom < state.windowsHeight;\n  return isTopInView || isBottomInView;\n}","map":{"version":3,"names":["utils","getOptions","AUTO_HEIGHT_SEL","AUTO_HEIGHT_RESPONSIVE_SEL","SECTION_SEL","ACTIVE_SEL","state","isResponsiveMode","lazyLoad","lazyLoadOthers","hasAutoHeightSections","$","lazyLoading","forEach","section","isSectionInViewport","el","rect","getBoundingClientRect","top","bottom","pixelOffset","isTopInView","windowsHeight","isBottomInView"],"sources":["/Users/rachelma/college/2023/fall/2223/internet-art/src/js/lazyLoad/lazyLoadOthers.js"],"sourcesContent":["import * as utils from '../common/utils.js'; \nimport { getOptions } from '../common/options.js';\nimport { \n    AUTO_HEIGHT_SEL,\n    AUTO_HEIGHT_RESPONSIVE_SEL,\n    SECTION_SEL,\n    ACTIVE_SEL\n} from '../common/selectors.js';\nimport { state } from '../common/state.js';\nimport { isResponsiveMode } from '../responsive.js';\nimport { lazyLoad } from './lazyLoad.js';\n\n/**\n* Makes sure lazyload is done for other sections in the viewport that are not the\n* active one. \n*/\nexport function lazyLoadOthers(){\n    var hasAutoHeightSections = utils.$(AUTO_HEIGHT_SEL)[0] || isResponsiveMode() && utils.$(AUTO_HEIGHT_RESPONSIVE_SEL)[0];\n\n    //quitting when it doesn't apply\n    if (!getOptions().lazyLoading || !hasAutoHeightSections){\n        return;\n    }\n\n    //making sure to lazy load auto-height sections that are in the viewport\n    utils.$(SECTION_SEL + ':not(' + ACTIVE_SEL + ')').forEach(function(section){\n        if(isSectionInViewport(section)){\n            lazyLoad(section);\n        }\n    });\n}\n\n\n/**\n* Determines whether a section is in the viewport or not.\n*/\nfunction isSectionInViewport (el) {\n    var rect = el.getBoundingClientRect();\n    var top = rect.top;\n    var bottom = rect.bottom;\n\n    //sometimes there's a 1px offset on the bottom of the screen even when the \n    //section's height is the window.innerHeight one. I guess because pixels won't allow decimals.\n    //using this prevents from lazyLoading the section that is not yet visible \n    //(only 1 pixel offset is)\n    var pixelOffset = 2;\n    \n    var isTopInView = top + pixelOffset < state.windowsHeight && top > 0;\n    var isBottomInView = bottom > pixelOffset && bottom < state.windowsHeight;\n\n    return isTopInView || isBottomInView;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,oBAAoB;AAC3C,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SACIC,eAAe,EACfC,0BAA0B,EAC1BC,WAAW,EACXC,UAAU,QACP,wBAAwB;AAC/B,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,QAAQ,QAAQ,eAAe;;AAExC;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAA,EAAE;EAC5B,IAAIC,qBAAqB,GAAGV,KAAK,CAACW,CAAC,CAACT,eAAe,CAAC,CAAC,CAAC,CAAC,IAAIK,gBAAgB,CAAC,CAAC,IAAIP,KAAK,CAACW,CAAC,CAACR,0BAA0B,CAAC,CAAC,CAAC,CAAC;;EAEvH;EACA,IAAI,CAACF,UAAU,CAAC,CAAC,CAACW,WAAW,IAAI,CAACF,qBAAqB,EAAC;IACpD;EACJ;;EAEA;EACAV,KAAK,CAACW,CAAC,CAACP,WAAW,GAAG,OAAO,GAAGC,UAAU,GAAG,GAAG,CAAC,CAACQ,OAAO,CAAC,UAASC,OAAO,EAAC;IACvE,IAAGC,mBAAmB,CAACD,OAAO,CAAC,EAAC;MAC5BN,QAAQ,CAACM,OAAO,CAAC;IACrB;EACJ,CAAC,CAAC;AACN;;AAGA;AACA;AACA;AACA,SAASC,mBAAmBA,CAAEC,EAAE,EAAE;EAC9B,IAAIC,IAAI,GAAGD,EAAE,CAACE,qBAAqB,CAAC,CAAC;EACrC,IAAIC,GAAG,GAAGF,IAAI,CAACE,GAAG;EAClB,IAAIC,MAAM,GAAGH,IAAI,CAACG,MAAM;;EAExB;EACA;EACA;EACA;EACA,IAAIC,WAAW,GAAG,CAAC;EAEnB,IAAIC,WAAW,GAAGH,GAAG,GAAGE,WAAW,GAAGf,KAAK,CAACiB,aAAa,IAAIJ,GAAG,GAAG,CAAC;EACpE,IAAIK,cAAc,GAAGJ,MAAM,GAAGC,WAAW,IAAID,MAAM,GAAGd,KAAK,CAACiB,aAAa;EAEzE,OAAOD,WAAW,IAAIE,cAAc;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}