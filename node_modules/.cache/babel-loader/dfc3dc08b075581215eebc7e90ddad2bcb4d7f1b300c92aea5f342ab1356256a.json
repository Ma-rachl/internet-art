{"ast":null,"code":"import { isTouch, isTouchDevice, win } from \"../common/constants.js\";\nimport { getOptions } from \"../common/options.js\";\nimport { setState } from \"../common/state.js\";\nimport { setBodyClass } from \"../stateClasses.js\";\n\n/**\n* Sets the state of the website depending on the active section/slide.\n* It changes the URL hash when needed and updates the body class.\n*/\nexport function setPageStatus(slideIndex, slideAnchor, anchorLink) {\n  var sectionHash = '';\n  if (getOptions().anchors.length && !getOptions().lockAnchors) {\n    //isn't it the first slide?\n    if (slideIndex) {\n      if (anchorLink != null) {\n        sectionHash = anchorLink;\n      }\n\n      //slide without anchor link? We take the index instead.\n      if (slideAnchor == null) {\n        slideAnchor = slideIndex;\n      }\n      setState({\n        lastScrolledSlide: slideAnchor\n      });\n      setUrlHash(sectionHash + '/' + slideAnchor);\n\n      //first slide won't have slide anchor, just the section one\n    } else if (slideIndex != null) {\n      setState({\n        lastScrolledSlide: slideAnchor\n      });\n      setUrlHash(anchorLink);\n    }\n\n    //section without slides\n    else {\n      setUrlHash(anchorLink);\n    }\n  }\n  setBodyClass();\n}\n\n/**\n* Sets the URL hash.\n*/\nfunction setUrlHash(url) {\n  if (getOptions().recordHistory) {\n    location.hash = url;\n  } else {\n    //Mobile Chrome doesn't work the normal way, so... lets use HTML5 for phones :)\n    if (isTouchDevice || isTouch) {\n      win.history.replaceState(undefined, undefined, '#' + url);\n    } else {\n      var baseUrl = win.location.href.split('#')[0];\n      win.location.replace(baseUrl + '#' + url);\n    }\n  }\n}","map":{"version":3,"names":["isTouch","isTouchDevice","win","getOptions","setState","setBodyClass","setPageStatus","slideIndex","slideAnchor","anchorLink","sectionHash","anchors","length","lockAnchors","lastScrolledSlide","setUrlHash","url","recordHistory","location","hash","history","replaceState","undefined","baseUrl","href","split","replace"],"sources":["/Users/rachelma/college/2023/fall/2223/internet-art/src/js/anchors/setPageStatus.js"],"sourcesContent":["import { isTouch, isTouchDevice, win } from \"../common/constants.js\";\nimport { getOptions } from \"../common/options.js\";\nimport { setState } from \"../common/state.js\";\nimport { setBodyClass } from \"../stateClasses.js\";\n\n/**\n* Sets the state of the website depending on the active section/slide.\n* It changes the URL hash when needed and updates the body class.\n*/\nexport function setPageStatus(slideIndex, slideAnchor, anchorLink){\n    var sectionHash = '';\n\n    if(getOptions().anchors.length && !getOptions().lockAnchors){\n\n        //isn't it the first slide?\n        if(slideIndex){\n            if(anchorLink != null){\n                sectionHash = anchorLink;\n            }\n\n            //slide without anchor link? We take the index instead.\n            if(slideAnchor == null){\n                slideAnchor = slideIndex;\n            }\n\n            setState({lastScrolledSlide: slideAnchor});\n            setUrlHash(sectionHash + '/' + slideAnchor);\n\n        //first slide won't have slide anchor, just the section one\n        }else if(slideIndex != null){\n            setState({lastScrolledSlide: slideAnchor});\n            setUrlHash(anchorLink);\n        }\n\n        //section without slides\n        else{\n            setUrlHash(anchorLink);\n        }\n    }\n\n    setBodyClass();\n}\n\n\n\n/**\n* Sets the URL hash.\n*/\nfunction setUrlHash(url){\n    if(getOptions().recordHistory){\n        location.hash = url;\n    }else{\n        //Mobile Chrome doesn't work the normal way, so... lets use HTML5 for phones :)\n        if(isTouchDevice || isTouch){\n            win.history.replaceState(undefined, undefined, '#' + url);\n        }else{\n            var baseUrl = win.location.href.split('#')[0];\n            win.location.replace( baseUrl + '#' + url );\n        }\n    }\n}"],"mappings":"AAAA,SAASA,OAAO,EAAEC,aAAa,EAAEC,GAAG,QAAQ,wBAAwB;AACpE,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAC;EAC9D,IAAIC,WAAW,GAAG,EAAE;EAEpB,IAAGP,UAAU,CAAC,CAAC,CAACQ,OAAO,CAACC,MAAM,IAAI,CAACT,UAAU,CAAC,CAAC,CAACU,WAAW,EAAC;IAExD;IACA,IAAGN,UAAU,EAAC;MACV,IAAGE,UAAU,IAAI,IAAI,EAAC;QAClBC,WAAW,GAAGD,UAAU;MAC5B;;MAEA;MACA,IAAGD,WAAW,IAAI,IAAI,EAAC;QACnBA,WAAW,GAAGD,UAAU;MAC5B;MAEAH,QAAQ,CAAC;QAACU,iBAAiB,EAAEN;MAAW,CAAC,CAAC;MAC1CO,UAAU,CAACL,WAAW,GAAG,GAAG,GAAGF,WAAW,CAAC;;MAE/C;IACA,CAAC,MAAK,IAAGD,UAAU,IAAI,IAAI,EAAC;MACxBH,QAAQ,CAAC;QAACU,iBAAiB,EAAEN;MAAW,CAAC,CAAC;MAC1CO,UAAU,CAACN,UAAU,CAAC;IAC1B;;IAEA;IAAA,KACI;MACAM,UAAU,CAACN,UAAU,CAAC;IAC1B;EACJ;EAEAJ,YAAY,CAAC,CAAC;AAClB;;AAIA;AACA;AACA;AACA,SAASU,UAAUA,CAACC,GAAG,EAAC;EACpB,IAAGb,UAAU,CAAC,CAAC,CAACc,aAAa,EAAC;IAC1BC,QAAQ,CAACC,IAAI,GAAGH,GAAG;EACvB,CAAC,MAAI;IACD;IACA,IAAGf,aAAa,IAAID,OAAO,EAAC;MACxBE,GAAG,CAACkB,OAAO,CAACC,YAAY,CAACC,SAAS,EAAEA,SAAS,EAAE,GAAG,GAAGN,GAAG,CAAC;IAC7D,CAAC,MAAI;MACD,IAAIO,OAAO,GAAGrB,GAAG,CAACgB,QAAQ,CAACM,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC7CvB,GAAG,CAACgB,QAAQ,CAACQ,OAAO,CAAEH,OAAO,GAAG,GAAG,GAAGP,GAAI,CAAC;IAC/C;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}