{"ast":null,"code":"import * as utils from '../common/utils.js';\nimport { getOptions } from '../common/options.js';\nimport { getState, setState, state } from '../common/state.js';\nimport { FP } from '../common/constants.js';\nimport { SLIDES_WRAPPER_SEL, SLIDE_SEL } from '../common/selectors.js';\nimport { landscapeScroll } from './landscapeScroll.js';\nimport { getPanelByElement } from '../common/item.js';\nFP.moveSlideLeft = moveSlideLeft;\nFP.moveSlideRight = moveSlideRight;\n\n/**\n* Slides a slider to the given direction.\n* Optional `section` param.\n*/\nexport function moveSlide(direction, section) {\n  var activeSectionItem = section == null ? getState().activeSection.item : section;\n  var activeSection = getPanelByElement(state.sections, activeSectionItem);\n  var slides = utils.$(SLIDES_WRAPPER_SEL, activeSectionItem)[0];\n\n  // more than one slide needed and nothing should be sliding\n  if (slides == null || state.slideMoving || activeSection.slides.length < 2) {\n    return;\n  }\n  var currentSlide = activeSection.activeSlide;\n  var destiny = direction === 'left' ? currentSlide.prev() : currentSlide.next();\n\n  //isn't there a next slide in the secuence?\n  if (!destiny) {\n    //respect loopHorizontal setting\n    if (!getOptions().loopHorizontal) return;\n    destiny = direction === 'left' ? utils.getLast(activeSection.slides) : activeSection.slides[0];\n  }\n  setState({\n    slideMoving: true && !FP.test.isTesting\n  });\n  landscapeScroll(slides, destiny.item, direction);\n}\n\n/**\n* Slides left the slider of the active section.\n* Optional `section` param.\n*/\nexport function moveSlideLeft(section) {\n  moveSlide('left', section);\n}\n\n/**\n* Slides right the slider of the active section.\n* Optional `section` param.\n*/\nexport function moveSlideRight(section) {\n  moveSlide('right', section);\n}","map":{"version":3,"names":["utils","getOptions","getState","setState","state","FP","SLIDES_WRAPPER_SEL","SLIDE_SEL","landscapeScroll","getPanelByElement","moveSlideLeft","moveSlideRight","moveSlide","direction","section","activeSectionItem","activeSection","item","sections","slides","$","slideMoving","length","currentSlide","activeSlide","destiny","prev","next","loopHorizontal","getLast","test","isTesting"],"sources":["/Users/rachelma/college/2023/fall/2223/internet-art/src/js/slides/moveSlide.js"],"sourcesContent":["import * as utils from '../common/utils.js';\nimport { getOptions } from '../common/options.js';\nimport { getState, setState, state } from '../common/state.js';\nimport { FP } from '../common/constants.js';\nimport { SLIDES_WRAPPER_SEL, SLIDE_SEL } from '../common/selectors.js';\nimport { landscapeScroll } from './landscapeScroll.js';\nimport { getPanelByElement } from '../common/item.js';\n\n\nFP.moveSlideLeft = moveSlideLeft;\nFP.moveSlideRight = moveSlideRight;\n\n/**\n* Slides a slider to the given direction.\n* Optional `section` param.\n*/\nexport function moveSlide(direction, section){\n    var activeSectionItem = section == null ? getState().activeSection.item : section;\n    var activeSection = getPanelByElement(state.sections, activeSectionItem);\n    var slides = utils.$(SLIDES_WRAPPER_SEL, activeSectionItem)[0];\n\n    // more than one slide needed and nothing should be sliding\n    if (slides == null || state.slideMoving || activeSection.slides.length < 2) {\n        return;\n    }\n\n    var currentSlide = activeSection.activeSlide;\n    var destiny = direction === 'left' ? currentSlide.prev() : currentSlide.next();\n\n    //isn't there a next slide in the secuence?\n    if(!destiny){\n        //respect loopHorizontal setting\n        if (!getOptions().loopHorizontal) return;\n\n        destiny = direction === 'left' ? utils.getLast(activeSection.slides) : activeSection.slides[0];\n    }\n\n    setState({slideMoving: true && !FP.test.isTesting});\n    landscapeScroll(slides, destiny.item, direction);\n}\n\n/**\n* Slides left the slider of the active section.\n* Optional `section` param.\n*/\nexport function moveSlideLeft(section){\n    moveSlide('left', section);\n}\n\n/**\n* Slides right the slider of the active section.\n* Optional `section` param.\n*/\nexport function moveSlideRight(section){\n    moveSlide('right', section);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,oBAAoB;AAC3C,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,oBAAoB;AAC9D,SAASC,EAAE,QAAQ,wBAAwB;AAC3C,SAASC,kBAAkB,EAAEC,SAAS,QAAQ,wBAAwB;AACtE,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,iBAAiB,QAAQ,mBAAmB;AAGrDJ,EAAE,CAACK,aAAa,GAAGA,aAAa;AAChCL,EAAE,CAACM,cAAc,GAAGA,cAAc;;AAElC;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,SAAS,EAAEC,OAAO,EAAC;EACzC,IAAIC,iBAAiB,GAAGD,OAAO,IAAI,IAAI,GAAGZ,QAAQ,CAAC,CAAC,CAACc,aAAa,CAACC,IAAI,GAAGH,OAAO;EACjF,IAAIE,aAAa,GAAGP,iBAAiB,CAACL,KAAK,CAACc,QAAQ,EAAEH,iBAAiB,CAAC;EACxE,IAAII,MAAM,GAAGnB,KAAK,CAACoB,CAAC,CAACd,kBAAkB,EAAES,iBAAiB,CAAC,CAAC,CAAC,CAAC;;EAE9D;EACA,IAAII,MAAM,IAAI,IAAI,IAAIf,KAAK,CAACiB,WAAW,IAAIL,aAAa,CAACG,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;IACxE;EACJ;EAEA,IAAIC,YAAY,GAAGP,aAAa,CAACQ,WAAW;EAC5C,IAAIC,OAAO,GAAGZ,SAAS,KAAK,MAAM,GAAGU,YAAY,CAACG,IAAI,CAAC,CAAC,GAAGH,YAAY,CAACI,IAAI,CAAC,CAAC;;EAE9E;EACA,IAAG,CAACF,OAAO,EAAC;IACR;IACA,IAAI,CAACxB,UAAU,CAAC,CAAC,CAAC2B,cAAc,EAAE;IAElCH,OAAO,GAAGZ,SAAS,KAAK,MAAM,GAAGb,KAAK,CAAC6B,OAAO,CAACb,aAAa,CAACG,MAAM,CAAC,GAAGH,aAAa,CAACG,MAAM,CAAC,CAAC,CAAC;EAClG;EAEAhB,QAAQ,CAAC;IAACkB,WAAW,EAAE,IAAI,IAAI,CAAChB,EAAE,CAACyB,IAAI,CAACC;EAAS,CAAC,CAAC;EACnDvB,eAAe,CAACW,MAAM,EAAEM,OAAO,CAACR,IAAI,EAAEJ,SAAS,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASH,aAAaA,CAACI,OAAO,EAAC;EAClCF,SAAS,CAAC,MAAM,EAAEE,OAAO,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASH,cAAcA,CAACG,OAAO,EAAC;EACnCF,SAAS,CAAC,OAAO,EAAEE,OAAO,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}